/*
ID: 100021881
LANG: JAVA
PROG: race3
*/

import java.io.*;
import java.util.*;
import java.math.*;

/**
* race3
*/
public class race3 {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader("race3.in"));
        int N = 0;
        String str;
        int time = 1;
        List<Node> graph = new ArrayList<Node>();
        while((str = br.readLine()) != null) {
            if(str.equals("-1")) {
                break;
            }
            String[] line = str.split(" ");
            if(graph.size() <= N) {
                graph.add(new Node(graph.size()));
            }
            for(int i = 0; !line[i].equals("-2"); i++) {
                int temp = Integer.parseInt(line[i]);
                while(graph.size() <= temp) {
                    graph.add(new Node(graph.size() ));
                }
                graph.get(N).next.add(graph.get(temp));
            }
            N++;
        }
        br.close();
        System.out.println(graph);
        Node start = graph.get(0);
        Node end = graph.get(N - 1);
        int unavoidableCnt = 0;
        int splitCnt = 0;
        for(int i = 1; i < N - 1; i++) {
            int t = ++time;
            graph.get(i).time = time;
            end.time = ++time;
            if(!walk(start, end.time, time)) {
                graph.get(i).unavoidable = true;
                unavoidableCnt++;
            }
        }
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("race3.out")));
        out.print(unavoidableCnt);
        for(int i = 1; i < N - 1; i++) {
            if(!graph.get(i).unavoidable) {
                continue;
            }
            out.print(" " + i);
            int t = ++time;
            graph.get(i).time = t;
            walk(graph.get(i), -1, t);
            if (!walk(graph.get(i), t, ++time)) {
                graph.get(i).split = true;
                splitCnt++;
            }
        }
        out.println();
        out.print(splitCnt);
        for(int i = 1; i < N - 1; i++) {
            if(graph.get(i).split) {
                out.println(" " + i);
            }
        }
        out.close();
        System.out.println(graph);
        System.exit(0);
    }
    public static boolean walk(Node node, int end, int t) {
        for(Node next : node.next) {
            if(next.time == end || (next.time != t && walk(n, end, t))) {
                return true;
            }
        }
        return false;
    }
    public static class Node {
        boolean unavoidable = false;
        boolean split = false;
        int time, index, next_count;
        List<Node> next = new ArrayList<Node>();
        public Node(int in) {
            index = in;
        }
        public String toString() {
        String str = index+"("+time+") [";
            for (Node n : next) str+=" "+n.index;
            return str+" ]";
        }
    }
}
