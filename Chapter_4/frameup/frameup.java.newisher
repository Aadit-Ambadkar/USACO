/*
ID: 100021881
LANG: JAVA
PROG: frameup
*/

// if you want to turn all the debug on, just find and replace "// DEBUG " with nothing

import java.io.*;
import java.util.*;

/**
 * frameup
 */
public class frameup {
    public static int n, m, nn;
    public static List<List<Integer>> z = new ArrayList<List<Integer>>();
    public static boolean[] cz = new boolean[26], tmp = new boolean[26];
    public static int[] d = new int[26];
    public static List<String> anst = new ArrayList<String>();
    public static void main(String[] args) throws Exception {
        long startTime = System.currentTimeMillis();
        BufferedReader br = new BufferedReader(new FileReader("frameup.in"));
        String[] first = br.readLine().split(" ");
        n = Integer.parseInt(first[0]);
        m = Integer.parseInt(first[1]);
        List<String> x = new ArrayList<String>();
        for(int i = 0; i < n; i++) {
            String p = br.readLine();
            x.add(p);
            for(int j = 0; j < m; j++) {
                if(p.charAt(j) != '.') {
                    cz[p.charAt(j) - 'A'] = true;
                }
            }
        }
        br.close();
        for(int i = 0; i < 26; i++) {
            z.add(new ArrayList<Integer>());
            if(cz[i]) {
                nn++;
            }
        }
        int l, r, a, b;
        //l=left, r=right, a=bottom, b=top
        for(int i = 0; i < 26; i++) {
            char c = (char)('A' + i);
            if(!cz[i]) {
                continue;
            }
            l = m;
            r = -1;
            a = n;
            b = -1;
            for(int j = 0; j < n; j++) {
                for(int k = 0; k < m; k++) {
                    if(x.get(j).charAt(k) == c) {
                        l = Math.min(l, k);
                        r = Math.max(r, k);
                        a = Math.min(a, j);
                        b = Math.max(b, j);
                    }
                }
            }
            for(int j = a; j <= b; j++) {
                if(x.get(j).charAt(l) != c) {
                    z.get(x.get(j).charAt(l)-'A').add(i);
                }
                if(x.get(j).charAt(r) != c) {
                    z.get(x.get(j).charAt(r)-'A').add(i);
                }
            }
            for(int j = l + 1; j < r; j++) {
                if(x.get(a).charAt(j) != c) {
                    z.get(x.get(a).charAt(j)-'A').add(i);
                }
                if(x.get(b).charAt(j) != c) {
                    z.get(x.get(b).charAt(j)-'A').add(i);
                }
            }
        }
        for(int i = 0; i < 26; i++) {
            if (cz[i]) {
                Collections.sort(z.get(i));
                for (int j = 0; j < z.get(i).size(); j++) {
                    d[z.get(i).get(j)]++;
                }
            }
        }
        Collections.sort(anst);
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("frameup.out")));
        for (String s : anst) {
            System.out.println(s);
        }
        out.close();
        System.out.println(System.currentTimeMillis() - startTime);
        System.exit(0);
    }
    public static void dfs(int a, String ans) {
        if (a==nn) {
            anst.add(new StringBuilder(ans).reverse().toString());
            return;
        }
        for (int i = 0; i < 26; i++) {
            if (cz[i]&&d[i]==0&&!tmp[i]) {
                tmp[i]=true;
                for (int j = 0; j < z.get(i).size(); j++) {
                    d[z.get(i).get(j)]--;
                }
                dfs(a+1, ans+(char)(i+'A'));
                for (int j = 0; j < z.get(i).size(); j++) {
                    d[z.get(i).get(j)]++;
                }
                tmp[i]=false;
            }
        }
        return;
    }
}
